scalar Datetime
scalar IntString
scalar JSON
scalar Number

input InputA {
  time: Datetime!
  recursiveA: InputA
  usingB: InputB
}

enum SingleItemEnum {
  IAmLonely
}

"""
A fine input.
"""
input InputB {
  time: Datetime
  usingA: InputA
  constraint: Boolean # Reserved word
}

input InputC {
  intStr: IntString!
  recursiveC: InputC
}

input SomeInput {
  str: String
  bool: Boolean
  float: Float
  int: Int
  datetime: Datetime
  recursive: SomeInput
  private: Boolean
  enum: OnlineStatus
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

"""
Whether something is online or not.
"""
enum OnlineStatus {
  Online
  Idle
  offline
}

enum OrderDirection {
  ASC
  DESC
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

enum UserOrderField {
  ID
  CREATED_AT
  FIRST_NAME
}

interface HasName {
  name: String!
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  avatarUrl: String
  isOnline: Boolean
  onlineStatus: OnlineStatus
  nicknames: [String!]!
  createdAt: Datetime!
  private: Boolean
  bestFriend: User
  someRandomArgField(
    bool: Boolean
    someInput: SomeInput
    inputC: InputC
    inputCArr: [InputC!]
    intStr: IntString
    intStrArr: [IntString!]
  ): String
  friends(beforeDate: Datetime, number: Number): [User!]!
  friendsConnection(
    statuses: [OnlineStatus!]
    beforeDate: Datetime
    name: String
    after: String
    first: Int
    before: String
    last: Int
    objTest: SomeInput
    objTests: [SomeInput]
    orderBy: [UserOrder!] = [{ direction: ASC, field: FIRST_NAME }]
  ): UserConnection!
  memberOf: [Member]
  memberOfSingular: Member
  intStrings: [IntString!]
  intString: IntString
  justStrings: [String!]
  justString: String
}

type Group implements Node & HasName {
  id: ID!
  name: String!
  avatarUrl: String
  topMember: Member
  members: [Member]
  adminsConnection(
    after: String
    first: Int
    before: String
    last: Int
  ): UserConnection!
}

union Member = User | Group

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type MemberConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [MemberEdge]
}

type MemberEdge {
  node: Member
  cursor: String!
}

type AddFriendPayload {
  addedFriend: User
}

type RemoveFriendPayload {
  removedFriendId: ID
}

type UpdateUserAvatarPayload {
  user: User
}

type UserUpdatedPayload {
  user: User
}

type SetOnlineStatusPayload {
  user: User
}

type TestIntInputPayload {
  success: Boolean
}

input RecursiveSetOnlineStatusInput {
  someValue: IntString!
  setOnlineStatus: SetOnlineStatusInput
}

input SetOnlineStatusInput {
  onlineStatus: OnlineStatus!
  someJsonValue: JSON!
  recursed: RecursiveSetOnlineStatusInput
}

input SearchInput {
  names: [String]
  id: Int!
  someOtherId: Float
}

input PesticideListSearchInput {
  companyName: [String!]
  pesticideIds: [Int!]
  skip: Int!
  take: Int!
}

type RecursiveInputPayload {
  recursionIsCool: Boolean
}

type SerializeCustomScalarArrayPayload {
  works: Boolean
}

type Query {
  node(id: ID!): Node
  loggedInUser: User!
  user(id: ID!): User
  member(id: ID!): Member
  members(
    groupId: ID!
    onlineStatuses: [OnlineStatus]
    after: String
    first: Int
    before: String
    last: Int
  ): MemberConnection
  users(
    status: OnlineStatus
    after: String
    first: Int
    before: String
    last: Int
  ): UserConnection
  search(input: SearchInput!): String
  searchPesticie(input: PesticideListSearchInput!): String
  findByLocation(location: Location!): String
}

type Mutation {
  updateUserAvatar(avatarUrl: String): UpdateUserAvatarPayload
  addFriend(friendId: ID!): AddFriendPayload
  removeFriend(friendId: ID!): RemoveFriendPayload
  testIntInput1(id: Int!): TestIntInputPayload
  testIntInput2(ids: [Int!]!): TestIntInputPayload
  testIntInput3(ids: [String!]!): TestIntInputPayload
  setOnlineStatus(onlineStatus: OnlineStatus!): SetOnlineStatusPayload
  setOnlineStatusComplex(input: SetOnlineStatusInput!): SetOnlineStatusPayload
  recursiveInput(input: InputA): RecursiveInputPayload
  serializeCustomScalarArray(
    input: [IntString!]!
  ): SerializeCustomScalarArrayPayload
}

type Subscription {
  userUpdated(id: ID!): UserUpdatedPayload
}

input ByAddress {
  city: String!
}

input ByLoc {
  lat: Float!
}

input Location @oneOf {
  byAddress: ByAddress
  byLoc: ByLoc
  byId: ID
}
